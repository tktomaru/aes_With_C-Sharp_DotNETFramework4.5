@echo off
setlocal enabledelayedexpansion

set BACH_PATH=%~dp0
cd %BACH_PATH%

rem ■argCypherMode
rem CBC	1	
rem CBC (Cipher Block Chaining) モードは、前のブロックの演算結果を次に引き継ぎます。 平文の各ブロックは、暗号化される前に、前のブロックの演算結果である暗号文とビットごとの排他的 OR 演算によって組み合わされます。 これにより、平文に同一のブロックが多数含まれている場合でも、それらのブロックはそれぞれ異なった暗号文へと暗号化されます。 最初の平文ブロックの場合は、暗号化される前に、ビットごとの排他的 OR 演算によって初期化ベクターと組み合わされます。 暗号文ブロックの 1 つのビットが破損すると、対応する平文ブロックも破損します。 さらに、後続ブロックの、元の破損ビットと同位置にあるビットも破損してしまいます。
rem 
rem CFB	4	
rem CFB (Cipher Feedback) モードは、一度に 1 ブロック全体を処理するのではなく、平文を少しずつ処理して暗号文を生成します。 このモードでは、長さが 1 ブロックで、複数のセクションに分割されたシフト レジスタを使用します。 たとえば、ブロック サイズが 8 バイトで、一度に 1 バイトずつ処理される場合、シフト レジスタは 8 個のセクションに分割されます。 暗号文の 1 つのビットが破損すると、対応する平文のビットが 1 つ破損し、シフト レジスタも破損します。 この結果、不良なビットがシフト レジスタからシフト アウトするまで、続けて処理される平文中のいくつかのビットも破損してしまいます。 既定のフィードバック サイズはアルゴリズムによって異なる可能性がありますが、通常は 8 ビットまたはブロック サイズのビット数になります。 フィードバックのビット数は、FeedbackSize プロパティを使用して変更できます。 CFB をサポートするアルゴリズムでは、このプロパティを使用してフィードバックを設定します。
rem 
rem CTS	5	
rem CTS (Cipher Text Stealing) モードは、任意の長さの平文を処理し、その平文と同じ長さの暗号文を生成します。 このモードは、平文の最後の 2 ブロック以外については、CBC モードと同じように動作します。
rem 
rem ECB	2	
rem ECB (Electronic Codebook) モードは、各ブロックを個別に暗号化します。 同じメッセージに含まれる同一の平文ブロック、または同じキーで暗号化された別のメッセージに含まれる平文ブロックは、同一の暗号文ブロックに変換されます。 重要: このモードは、複数のセキュリティ悪用の扉を開くので、推奨されません。 暗号化する平文に繰り返しが多い場合、生成された暗号文に含まれるあるブロックが一度に 1 ブロックずつ解読される可能性が高まります。 ブロック分析を使用して暗号化キーを判断することもできます。 また、悪意のある攻撃者が、攻撃に気付かれることなく個別のブロックを置き換えたり、交換したりすることもできるので、攻撃に気付かれることなくブロックを保存したり、他のポイントでストリームに挿入したりすることも可能になります。
rem 
rem OFB	3	
rem OFB (Output Feedback) モードは、一度に 1 ブロック全体を処理するのではなく、平文を少しずつ処理して暗号文を生成します。 このモードは CFB とほとんど同じですが、シフト レジスタへの入力方法だけが異なります。 暗号文の 1 つのビットが破損すると、平文の対応するビットが破損します。 ただし、暗号文に余分なビットや欠落しているビットがあると、平文はその位置から破損してしまいます。
rem 
rem ■Padding
rem ANSIX923	4	
rem ANSIX923 の埋め込み文字列は、ブロック長に到達する直前の位置までゼロを設定したバイト列で構成されます。
rem 
rem ISO10126	5	
rem ISO10126 の埋め込み文字列は、ブロック長に到達する直前の位置までランダムなデータで構成されます。
rem 
rem None	1	
rem 埋め込みが完了していません。
rem 
rem PKCS7	2	
rem PKCS #7 埋め込み文字列は、バイト シーケンスで構成され、各バイト シーケンスは追加される埋め込みバイトの合計数に等しいバイト数になります。
rem 
rem Zeros	3	
rem 埋め込み文字列は、0 に設定されたバイトで構成されます。

rem ■暗号化する
rem 0 enc dec flg 1 = encode
rem 1 data
rem 2 key
rem 3 out
rem 4 iv
rem 5 argCypherMode CBC = 1 ECB = 2 OFB = 3 CFB = 4 CTS = 5
rem 6 argPaddingMode  None = 1 埋め込みなし PKCS7 = 2 Zeros = 3 ANSIX923 = 4 ISO10126 = 5
rem 7 argKeySizes  128 がデフォルト
rem 8 argBlockSize 128 がデフォルト
aes 1 data.txt key.dat out-enc.dat iv.dat 1 3 128 128

rem ■上記で暗号化したデータを復号する
rem decode
rem 0 enc dec flg 0 = decode
rem 1 data
rem 2 key
rem 3 out
rem 4 iv
rem 5 argCypherMode CBC = 1 ECB = 2 OFB = 3 CFB = 4 CTS = 5
rem 6 argPaddingMode  None = 1 埋め込みなし PKCS7 = 2 Zeros = 3 ANSIX923 = 4 ISO10126 = 5
rem 7 argKeySizes  128 がデフォルト
rem 8 argBlockSize 128 がデフォルト
aes 0 out-enc.dat key.dat out-dec.dat iv.dat 1 3
